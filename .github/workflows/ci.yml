name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  # Linting and Code Quality
  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Run Black (code formatting)
      run: poetry run black --check --diff . || echo "Black formatting issues found - continuing..."
      
    - name: Run Ruff (linting)
      run: poetry run ruff check .
      
    - name: Run MyPy (type checking)
      run: poetry run mypy app/ --ignore-missing-imports || echo "MyPy type issues found - continuing..."
      
    - name: Check import sorting
      run: poetry run ruff check --select I . || echo "Import sorting issues found - continuing..."

  # Unit Tests (No external services required)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        APP_NAME=Product Review Analyzer Test
        DEBUG=true
        TESTING=true
        DB_HOST=localhost
        DB_PORT=5433
        DB_USER=review_user
        DB_PASSWORD=review_password
        DB_NAME=review_analyzer_test
        OPENAI_API_KEY=sk-test-key-for-ci-only
        OPENAI_MODEL=gpt-3.5-turbo
        GCP_PROJECT_ID=test-project
        GCP_BUCKET_NAME=test-bucket
        GCP_CREDENTIALS_PATH=./credentials/gcp-credentials.json
        FAISS_INDEX_PATH=./test_data/faiss_index
        REQUEST_TIMEOUT=30
        MAX_RETRIES=3
        API_HOST=0.0.0.0
        API_PORT=8000
        EOF
        
    - name: Create test credentials file
      run: |
        mkdir -p credentials
        echo '{"type": "service_account", "project_id": "test", "private_key_id": "test", "private_key": "test", "client_email": "test@test.com", "client_id": "test", "auth_uri": "https://accounts.google.com/o/oauth2/auth", "token_uri": "https://oauth2.googleapis.com/token", "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs", "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40test.com"}' > credentials/gcp-credentials.json
        
    - name: Run unit tests only
      env:
        ENV_FILE: .env.test
        TESTING: true
        OPENAI_API_KEY: sk-test-key-for-ci-only
        GCP_PROJECT_ID: test-project
        GCP_BUCKET_NAME: test-bucket
        GCP_CREDENTIALS_PATH: ./credentials/gcp-credentials.json
      run: poetry run pytest tests/unit/ -m "unit" --cov=app --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit
        name: unit-tests

  # Mock Tests (Tests with mocked external services)
  mock-tests:
    name: Mock Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: review_password
          POSTGRES_USER: review_user
          POSTGRES_DB: review_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        APP_NAME=Product Review Analyzer Test
        DEBUG=true
        TESTING=true
        DB_HOST=localhost
        DB_PORT=5433
        DB_USER=review_user
        DB_PASSWORD=review_password
        DB_NAME=review_analyzer_test
        OPENAI_API_KEY=sk-test-key-for-ci-only
        OPENAI_MODEL=gpt-3.5-turbo
        GCP_PROJECT_ID=test-project
        GCP_BUCKET_NAME=test-bucket
        GCP_CREDENTIALS_PATH=./credentials/gcp-credentials.json
        FAISS_INDEX_PATH=./test_data/faiss_index
        REQUEST_TIMEOUT=30
        MAX_RETRIES=3
        API_HOST=0.0.0.0
        API_PORT=8000
        EOF
        
    - name: Create test credentials file
      run: |
        mkdir -p credentials
        echo '{"type": "service_account", "project_id": "test", "private_key_id": "test", "private_key": "test", "client_email": "test@test.com", "client_id": "test", "auth_uri": "https://accounts.google.com/o/oauth2/auth", "token_uri": "https://oauth2.googleapis.com/token", "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs", "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test%40test.com"}' > credentials/gcp-credentials.json
        
    - name: Run mock tests (API tests with mocked services)
      env:
        ENV_FILE: .env.test
        TESTING: true
        OPENAI_API_KEY: sk-test-key-for-ci-only
        GCP_PROJECT_ID: test-project
        GCP_BUCKET_NAME: test-bucket
        GCP_CREDENTIALS_PATH: ./credentials/gcp-credentials.json
      run: poetry run pytest tests/api/ -m "unit or mock" --cov=app --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: mock
        name: mock-tests

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [unit-tests, mock-tests]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Build and push Docker image
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/product-review-analyzer:latest
          ghcr.io/${{ github.repository_owner }}/product-review-analyzer:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      
    - name: Build Docker image (local test)
      if: github.ref != 'refs/heads/main'
      run: docker build -t product-review-analyzer:latest .
      
    - name: Test Docker image
      if: github.ref != 'refs/heads/main'
      run: |
        docker run --rm product-review-analyzer:latest python -c "print('Docker image test successful')"

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [unit-tests, mock-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Run Bandit security scan
      run: poetry run bandit -r app/ -f json -o bandit-report.json || echo "Security issues found - continuing..."
      
    - name: Display Bandit results
      run: |
        if [ -f bandit-report.json ]; then
          echo "Security scan completed. Check bandit-report.json for details."
        else
          echo "No security issues found."
        fi

  # Integration Tests (Requires real services - only on main branch)
  integration-tests:
    name: Integration Tests (Real Services)
    runs-on: ubuntu-latest
    needs: [unit-tests, mock-tests, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: read
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: review_password
          POSTGRES_USER: review_user
          POSTGRES_DB: review_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        APP_NAME=Product Review Analyzer Test
        DEBUG=true
        TESTING=false
        DB_HOST=localhost
        DB_PORT=5433
        DB_USER=review_user
        DB_PASSWORD=review_password
        DB_NAME=review_analyzer_test
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        OPENAI_MODEL=gpt-3.5-turbo
        GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
        GCP_BUCKET_NAME=${{ secrets.GCP_BUCKET_NAME }}
        GCP_CREDENTIALS_PATH=./credentials/gcp-credentials.json
        FAISS_INDEX_PATH=./test_data/faiss_index
        REQUEST_TIMEOUT=30
        MAX_RETRIES=3
        API_HOST=0.0.0.0
        API_PORT=8000
        EOF
        
    - name: Setup Google Cloud credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}
      continue-on-error: true
      
    - name: Check if required secrets are available
      run: |
        echo "Checking required secrets for integration tests..."
        
        if [ -z "${{ secrets.GCP_CREDENTIALS_JSON }}" ]; then
          echo "❌ GCP_CREDENTIALS_JSON secret is not available"
          echo "To run integration tests, add GCP_CREDENTIALS_JSON secret to repository settings."
          exit 1
        else
          echo "✅ GCP_CREDENTIALS_JSON is available"
        fi
        
        if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "❌ OPENAI_API_KEY secret is not available"
          echo "To run integration tests, add OPENAI_API_KEY secret to repository settings."
          exit 1
        else
          echo "✅ OPENAI_API_KEY is available"
        fi
        
        if [ -z "${{ secrets.GCP_PROJECT_ID }}" ]; then
          echo "❌ GCP_PROJECT_ID secret is not available"
          echo "To run integration tests, add GCP_PROJECT_ID secret to repository settings."
          exit 1
        else
          echo "✅ GCP_PROJECT_ID is available"
        fi
        
        if [ -z "${{ secrets.GCP_BUCKET_NAME }}" ]; then
          echo "❌ GCP_BUCKET_NAME secret is not available"
          echo "To run integration tests, add GCP_BUCKET_NAME secret to repository settings."
          exit 1
        else
          echo "✅ GCP_BUCKET_NAME is available"
        fi
        
        echo "✅ All required secrets are available. Proceeding with integration tests."
        
    - name: Create credentials directory
      run: mkdir -p credentials
      
    - name: Create GCP credentials file
      run: |
        echo '${{ secrets.GCP_CREDENTIALS_JSON }}' > credentials/gcp-credentials.json
        
    - name: Run integration tests with real services
      env:
        ENV_FILE: .env.test
      run: poetry run pytest tests/integration/ --cov=app --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests 