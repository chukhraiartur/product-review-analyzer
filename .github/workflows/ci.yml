name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  # Linting and Code Quality
  lint:
    name: Linting and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Run Black (code formatting)
      run: poetry run black --check --diff . || echo "Black formatting issues found - continuing..."
      
    - name: Run Ruff (linting)
      run: poetry run ruff check .
      
    - name: Run MyPy (type checking)
      run: poetry run mypy app/ --ignore-missing-imports || echo "MyPy type issues found - continuing..."
      
    - name: Check import sorting
      run: poetry run ruff check --select I . || echo "Import sorting issues found - continuing..."

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: review_password
          POSTGRES_USER: review_user
          POSTGRES_DB: review_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        APP_NAME=Product Review Analyzer Test
        DEBUG=true
        DB_HOST=localhost
        DB_PORT=5433
        DB_USER=review_user
        DB_PASSWORD=review_password
        DB_NAME=review_analyzer_test
        OPENAI_API_KEY=test_key
        OPENAI_MODEL=gpt-4
        GCP_PROJECT_ID=test-project
        GCP_BUCKET_NAME=test-bucket
        GCP_CREDENTIALS_PATH=./test-credentials.json
        FAISS_INDEX_PATH=./test_data/faiss_index
        REQUEST_TIMEOUT=30
        MAX_RETRIES=3
        API_HOST=0.0.0.0
        API_PORT=8000
        EOF
        
    - name: Create test credentials file
      run: |
        mkdir -p credentials
        echo '{"type": "service_account", "project_id": "test"}' > credentials/gcp-credentials.json
        
    - name: Run unit tests
      env:
        ENV_FILE: .env.test
      run: poetry run pytest tests/ -m "unit" --cov=app --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit
        name: unit-tests

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: review_password
          POSTGRES_USER: review_user
          POSTGRES_DB: review_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        APP_NAME=Product Review Analyzer Test
        DEBUG=true
        DB_HOST=localhost
        DB_PORT=5433
        DB_USER=review_user
        DB_PASSWORD=review_password
        DB_NAME=review_analyzer_test
        OPENAI_API_KEY=test_key
        OPENAI_MODEL=gpt-4
        GCP_PROJECT_ID=test-project
        GCP_BUCKET_NAME=test-bucket
        GCP_CREDENTIALS_PATH=./test-credentials.json
        FAISS_INDEX_PATH=./test_data/faiss_index
        REQUEST_TIMEOUT=30
        MAX_RETRIES=3
        API_HOST=0.0.0.0
        API_PORT=8000
        EOF
        
    - name: Create test credentials file
      run: |
        mkdir -p credentials
        echo '{"type": "service_account", "project_id": "test"}' > credentials/gcp-credentials.json
        
    - name: Run integration tests
      env:
        ENV_FILE: .env.test
      run: poetry run pytest tests/ -m "integration" --cov=app --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests

  # API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: review_password
          POSTGRES_USER: review_user
          POSTGRES_DB: review_analyzer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        APP_NAME=Product Review Analyzer Test
        DEBUG=true
        DB_HOST=localhost
        DB_PORT=5433
        DB_USER=review_user
        DB_PASSWORD=review_password
        DB_NAME=review_analyzer_test
        OPENAI_API_KEY=test_key
        OPENAI_MODEL=gpt-4
        GCP_PROJECT_ID=test-project
        GCP_BUCKET_NAME=test-bucket
        GCP_CREDENTIALS_PATH=./test-credentials.json
        FAISS_INDEX_PATH=./test_data/faiss_index
        REQUEST_TIMEOUT=30
        MAX_RETRIES=3
        API_HOST=0.0.0.0
        API_PORT=8000
        EOF
        
    - name: Create test credentials file
      run: |
        mkdir -p credentials
        echo '{"type": "service_account", "project_id": "test"}' > credentials/gcp-credentials.json
        
    - name: Run API tests
      env:
        ENV_FILE: .env.test
      run: poetry run pytest tests/ -m "api" --cov=app --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: api
        name: api-tests

  # GCS Tests
  gcs-tests:
    name: Google Cloud Storage Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
        
    - name: Run GCS tests
      run: poetry run pytest tests/ -m "gcs" --cov=app --cov-report=xml --cov-report=term-missing
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: gcs
        name: gcs-tests

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, gcs-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: docker build -t product-review-analyzer:latest .
      
    - name: Test Docker image
      run: |
        docker run --rm product-review-analyzer:latest python -c "print('Docker image test successful')"
      
    - name: Upload Docker image to GitHub Container Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, gcs-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security scan
      uses: python-security/bandit-action@v1
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        path: app/
        level: medium
        confidence: medium 