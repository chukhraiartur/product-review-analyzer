[tool.poetry]
name = "product-review-analyzer"
version = "0.1.0"
description = "A product review analyzer with AI sentiment analysis and vector search"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
sqlalchemy = "^2.0.23"
psycopg2-binary = "^2.9.9"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
requests = "^2.31.0"
beautifulsoup4 = "^4.12.2"
openai = "^1.3.7"
faiss-cpu = "^1.7.4"
google-cloud-storage = "^2.10.0"
torch = {version = "^2.1.0", source = "pytorch"}
torchvision = {version = "^0.16.0", source = "pytorch"}
sentence-transformers = "^2.2.2"
numpy = ">=1.24.0,<2.0.0"
python-multipart = "^0.0.6"
alembic = "^1.12.1"
python-dotenv = "^1.0.0"
lxml = "^6.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
httpx = "^0.25.2"
black = "^23.11.0"
ruff = "^0.1.6"
mypy = "^1.7.1"
pre-commit = "^3.6.0"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # within an except clause, raise exceptions with raise ... from err
    "B007",  # loop control variable not used within loop body
    "UP007", # use X | Y for type annotations
    "UP038", # use X | Y in isinstance call instead of (X, Y)
    "F841",  # local variable is assigned to but never used
    "E402",  # module level import not at top of file
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = true
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "faiss",
    "google.cloud.storage",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=70",
    "-v",
    "--strict-markers",
    "--disable-warnings",
    "--tb=short"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests (require real services)",
    "unit: marks tests as unit tests (work everywhere)",
    "api: marks tests as API integration tests",
    "gcs: marks tests as Google Cloud Storage tests",
    "mock: marks tests as mock tests (work everywhere with mocks)",
    "container: marks tests as container-specific tests",
    "local: marks tests as local-only tests",
    "real_services: marks tests that require real external services"
]

[tool.poetry.scripts]
init-db = "scripts.init_db:main" 